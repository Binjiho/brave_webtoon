name: brave_webtoon CD with Gradle,Docker

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Restore cached Primes
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: create application-db.yml
        run: |
          cd ./src/main/resources
          touch ./application-db.yml
          echo "${{ secrets.DB_YML }}" >> ./application-db.yml
        shell: bash

      - name: create application-env.yml
        run: |
          cd ./src/main/resources
          touch ./application-db.yml
          echo "${{ secrets.ENV_YML }}" >> ./application-env.yml
        shell: bash

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: docker FE image build
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:backend .
          cd ./frontend
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:frontend .

      - name: DockerHub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: docker Hub push
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:backend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:frontend

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      deploy-directory: ./deploy
    steps:
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS Credentials For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_PUBLIC }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_PRIVATE }}
          aws-region: ap-northeast-2

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: DockerImagePull
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AWS_EC2_PUBLIC_DNS }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          port: 22
          timeout: 40s
          script_stop: true
          script: |
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:backend || exit 1
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:frontend || exit 1

      - name: Deploy sh
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AWS_EC2_PUBLIC_DNS }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          port: 22
          timeout: 40s
          script_stop: true
          script: |
            pwd
            ls
            cd /home/ec2-user/deploy
            sh deploy.sh

      - name: Remove Github Actions IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32